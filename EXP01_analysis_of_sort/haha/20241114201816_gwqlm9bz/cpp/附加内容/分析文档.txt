分区预测次数：
	在 BlockQuickSort 中，partitionBlock 函数会对每个待排序的分区进行处理，选择一个枢轴 (pivot) 并将分区内的元素分为较小部分和较大部分。对于每个元素来说，有一个比较操作 arr[j] < pivot，这是一种分支预测行为。现代处理器通过分支预测来提高处理性能，但如果数据不均匀或不符合分支预测的期望，将导致性能下降。特别是对于大数组和重复许多次的元素，这种情况会更为明显。因此，BlockQuickSort 在元素不均匀分布时可能遭遇更多的错误预测。

块优化：
	BlockQuickSort 通过在超过某个 blockSize 时递归调用自身，而在小于这个尺寸时使用插入排序，来优化小数组的排序性能，在极端的情况下（例如选了坏基元）肯定会更好一点，但是由于数据随机，所以效果有限

递归深度分析：
	这种算法中，二元划分导致每次生成三个子数组，这会减少划分的平均长度（与经典快速排序中生成两个子数组相比）。理论上，DualPivotQuickSort 的递归深度趋近于 log3/2(n)，比经典的 log2(n) 要浅，因为它的划分更多而且更快收敛。这里要注意枢轴选取。如果枢轴选的不好，会拖后腿，但是由于它本身是三路快排，所以也不会太差。如果枢轴选的好（只要最差基元的情况不是很多），应该也能拉开数量级的差距



Classic QuickSort 应该会受到 pivot 选择不当时性能下降的影响，比如在接近已排序的数组上。
BlockQuickSort 将受益于减少递归调用数和对于小块的优化（尤其是插入排序在小规模数据上表现通常较好）。
DualPivotQuickSort 能够有效地处理多数情况下的分区问题，降低递归深度和提高数据处理速度。
